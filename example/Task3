pragma solidity 0.5.2;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol"; 

contract ERC20TokenInterface {
    
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  
  event Transfer(address indexed from, address indexed to, uint256 value);
  
}

contract ERC20Token is ERC20TokenInterface{
    using SafeMath for uint256;
    
    mapping(address => uint256) balances;
    
    string public name;
    string public symbol;
    uint8 public decimals;
    uint _totalSupply;
    uint perEth;


    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor() public {

        name = "MyCustomToken";
        symbol = "MCT";
        decimals = 18;
        _totalSupply = 1000000000;
        
    }
    
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
        
        // SafeMath.sub will throw if there is not enough balance.
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
      }
  
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
      }
  
    function totalSupply() public view returns(uint256){
        
        return _totalSupply;
    }
}
